name: "Terraform"

on:
  # Trigger a specific workflow run on demand without need for a code push/pull request
  workflow_dispatch:
    inputs:
      gkeRegion:
        description: "GKE region for the cluster"
        required: true
      applicationName:
        description: "Name of the project to deploy"
        required: true
      githubRepo:
        description: "Link of public github repo to deploy"
        required: true

jobs:
  apply_cluster:
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Checkout the student's repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.githubRepo }}
          path: "./${{ github.event.inputs.githubRepo }}"

      - name: Copy docker file into the repo
        run: |
          CP dockerfile ./${{ github.event.inputs.githubRepo }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: deploying-with-terraform

      - name: Install docker-credential-gcr
        run: gcloud components install docker-credential-gcr

      - name: Configure docker-credential-gcr
        run: docker-credential-gcr configure-docker

      - name: Build Docker image
        run: |
          docker build -t eu.gcr.io/${{ github.event.inputs.applicationName }}/api-skaffold:v1 ./${{ github.event.inputs.githubRepo }}

      - name: Push Docker image to Google Container Registry
        run: |
          docker push eu.gcr.io/${{ github.event.inputs.applicationName }}/api-skaffold:v1

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # formats the file
      - name: Terraform Format
        run: terraform fmt

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -var 'gcp_credentials=${{ secrets.GCP_SA_KEY }}' -var 'gcp_region=${{ github.event.inputs.gkeRegion }}' -var 'application_name=${{github.event.input.applicationName}}'

      # Apply terraform
      - name: Terraform Apply
        run: terraform plan -var 'gcp_credentials=${{ secrets.GCP_SA_KEY }}' -var 'gcp_region=${{ github.event.inputs.gkeRegion }}' -var 'application_name=${{github.event.input.applicationName}}' -auto-approve

      - name: Terraform output
        run: terraform output
